import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import java.io.IOException;

public class JacksonUtility {

    private static final ObjectMapper objectMapper = new ObjectMapper();

    static {
        // Enable pretty printing
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
    }

    public static String objectToJson(Object object) {
        try {
            return objectMapper.writeValueAsString(object);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            // Handle the exception as needed
            return null;
        }
    }

    public static <T> T jsonToObject(String json, Class<T> valueType) {
        try {
            return objectMapper.readValue(json, valueType);
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception as needed
            return null;
        }
    }

    public static String prettyPrintJson(String json) {
        try {
            JsonNode tree = objectMapper.readTree(json);
            return objectMapper.writeValueAsString(tree);
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception as needed
            return null;
        }
    }

    public static String addJsonComment(String json, String comment) {
        try {
            JsonNode tree = objectMapper.readTree(json);
            ObjectNode root = (ObjectNode) tree;

            // Add a comment property
            root.put("_comment", comment);

            return objectMapper.writeValueAsString(root);
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception as needed
            return null;
        }
    }
    
    // Additional methods can be added based on specific needs
}
